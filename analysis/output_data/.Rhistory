colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
phis <- seq(from = 0, to = 1, by = 0.25)
phis <- seq(from = 0, to = 1, by = 0.25)
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
as.data.frame(log(autoregs))
as.data.frame(log(autoregs+1))
as.data.frame(log(autoregs+1))
colnames(autoregs) <- phis
as.data.frame(autoregs)
autoreg <- function(phi, time=100){
vec <- numeric(time)
for (i in 1:time){
x_0 <- 0
x_1 <- phi*x_0 + rnorm(1,0,1)
x_0 <- x_1
vec[i] <- x_1
}
return(vec)
}
phis <- seq(from = 0, to = 1, by = 0.25)
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
as.data.frame(1+autoregs)
as.data.frame(log(1+autoregs))
colnames(autoregs) <- phis
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(log(1+autoregs))
as.data.frame(log(autoregs))
as.data.frame(autoregs)
colnames(autoregs) <- phis
as.data.frame(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_point() + theme_bw()
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_smooth() + theme_bw()
ggplot(data, aes(x = Var1, y = value, alpha = factor(Var2))) + geom_smooth() + theme_bw()
library("WDI") #download world bank package
library("plyr")
library("dplyr") #download dplyr package to ease data merging and handling
library("reshape2") #download reshape2 package to ease data merging and handling
QR <- rnorm(120, mean = 0.08, 0.20)
QR
periods <- length(QR)
periods
periods <- length(QR)
AR <- numeric(periods)
for (period in periods){
AR[period] <- prod(1+QR[period-4:period])^(1/4) - 1
}
AR
for (period in 1:periods){
AR[period] <- prod(1+QR[period-4:period])^(1/4) - 1
}
AR
for (period in 1:1){
AR[period] <- 1+QR[period-4:period]
}
AR
AR <- numeric(4)
for (period in 1:1){
AR[period] <- 1+QR[period-4:period]
}
AR
1+QR[1-3:period]
1+QR[4-3:4]
QR[4-3:4]
1+QR[4-3:4,]
QR[1:4]
QR[(3-1):4]
QR[(4-1):4]
QR[(4-1):4]
QR[(5-1):4]
QR[(5-1):5]
prod(1+QR)^(1/4)-1
1+QR
prod(1+QR)
QR[4-3:-4]
QR <- rnorm(120, mean = 0.08, 0.20)
QR[4-3:-4]
QR
QR[4-3:-4]
QR[1-3:-4]
QR[2-3:-4]
QR[3-3:-4]
QR[4-3:-4]
QR[4-4:-1]
QR[5-4:-1]
QR[5-4:-2]
QR[6-4:-2]
QR
QR[4-4:-1]
QR[4-4:-2]
QR[5-4:-1]
QR[3-4:-1]
QR[4-4:-1]
QR[4-4:0]
QR[5-4:1]
QR[6-4:2]
QR[6-4:3]
QR[6-4:-1]
QR[6-4:0]
QR[6-4:-1]
QR[6-4:1]
QR[7-4:1]
QR[4-4:1]
QR[4-4:2]
QR[4-4:-1]
QR[4-4:0]
QR[5-4:1]
QR[5-4:0]
QR[5-4:-1]
QR[5-4:2]
QR[5-4:1]
QR[4-4:1]
QR[4-4:2]
QR[4-4:0]
QR[5-4:1]
QR[6-4:1]
QR[7-4:1]
QR[8-4:1]
QR[1-5:1]
QR[1-5:1]
QR[1-5:1]
QR[5-4:1]
QR[6-4:1]
periods <- seq(length(QR))
QR[1:1]
QR[5-4:1]
AR <- numeric(periods)
AR <- numeric(length(periods))
for (period in periods){
AR[period] <- prod(1+QR[(4+period)-4:1])^(1/4)-1
}
AR
for (period in periods){
AR[period+3] <- prod(1+QR[(4+period)-4:1])^(1/4)-1
}
AR
for (period in periods){
AR[(period+3)] <- prod(1+QR[(4+period)-4:1])^(1/4)-1
}
AR
for (period in periods){
AR[period] <- prod(1+QR[(3+period)-4:1])^(1/4)-1
}
AR
for (period in periods){
AR[period] <- prod(1+QR[(6+period)-4:1])^(1/4)-1
}
AR
for (period in periods){
AR[period] <- prod(1+QR[(2+period)-4:1])^(1/4)-1
}
AR
for (period in periods){
AR[period] <- prod(1+QR[(4+period)-4:1])^(1/4)-1
}
AR
cbind(QR,AR)
QR <- rnorm(120, mean = 0.08, 0.20)
periods <- seq(length(QR))
AR <- numeric(length(periods))
for (period in periods){
AR[period] <- prod(1+QR[(4+period)-4:1])^(1/4)-1
}
length(AR)
length(QR)
AR
for (period in periods){
AR[period] <- prod(1+QR[(4+period)-4:1])^(1/4)-1
}
for (period in periods){
AR[period] <- prod(1+QR[(5+period)-4:1])^(1/4)-1
}
AR[period] <- prod(1+QR[(6+period)-4:1])^(1/4)-1
for (period in periods){
AR[period] <- prod(1+QR[(6+period)-4:1])^(1/4)-1
}
for (period in periods){
AR[period] <- prod(1+QR[(6+period)-4:1])^(1/4)-1
}
for (period in periods){
AR[period] <- prod(1+QR[(3+period)-4:1])^(1/4)-1
}
QR <- rnorm(120, mean = 0.08, 0.20)
periods <- seq(length(QR))
AR <- numeric(length(periods))
for (period in periods){
AR[period] <- prod(1+QR[(4+period)-4:1])^(1/4)-1
}
#####Merge data
#This script merges together the files from
#the input folder
#Packages for data cleaning
library('reshape2')
library('dplyr')
library('lubridate')
library('data.table')
library('zoo')
library('ggplot2')
#Define input and output locations
loc_data_input <- "~/Desktop/Ratings/data/input"
loc_data_output <- "~/Desktop/Ratings/data/output"
#Read in all the input data files in working directory as data frames----
files <- dir(loc_data_input)
for (file in files){
perpos <- which(strsplit(file, "")[[1]]==".")
assign(
gsub(" ","",substr(file, 1, perpos-1)),
read.csv(paste(file,sep=""), stringsAsFactors=FALSE))
}
#Read in all the output data files in working directory as data frames----
files <- dir(loc_data_output)
for (file in files){
perpos <- which(strsplit(file, "")[[1]]==".")
assign(
gsub(" ","",substr(file, 1, perpos-1)),
read.csv(paste(file,sep=""), stringsAsFactors=FALSE))
}
#####MERGE DEFAULT HISTORY W/ WB
defaulthistory <- select(defaulthistory, iso2c, year, default_date = date)
data <- left_join(01_WB, defaulthistory, by = c("iso2c","year"))
install.packages("knitr")
#Packages for data cleaning
library('reshape2')
library('dplyr')
library('lubridate')
library('data.table')
library('zoo')
library('ggplot2')
loc_data_input <- "~/Desktop/Lawrence Data"
portfolio <- read.csv("25ff.csv", sep = ",")
portfolio$date <- mdy(portfolio$date)
return_t <- select(portfolio, -date, -mktrf, -smb, -hml, -rf, -umd)
omega <- cov(return_t)
Er_t <- colMeans(return_t)
unity <- rep(1,25)
M_bar <- seq(0.80, 1.20, 0.01)
beta_M <- NULL
for (i in M_bar ) {
beta_M[i] = omega^{-1}%*%(unity - M_bar[i]*(unity + Er_t))
}
loc_data_input <- "~/Desktop/Lawrence Data"
portfolio <- read.csv("25ff.csv", sep = ",")
loc_data_input <- "~/Desktop/Lawrence Data"
portfolio <- read.csv("25ff.csv", sep = ",")
library("pander", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
#####Regression Data
#This script creates data for regging
#Packages for regression analysis and data manipulation
library('WDI')
library('reshape2')
library('dplyr')
library('lubridate')
library('data.table')
library('zoo')
library('car')
library('ggplot2')
library('GGally')
library('stargazer')
library('Hmisc')
library('stats')
#Define input and output locations
loc_data_output <- "~/Desktop/Ratings/data/output"
loc_results_output <- "~/Desktop/Ratings/analysis/output"
#Read in regression file in working directory as data frame----
setwd(loc_data_output)
data <- read.csv('08_regdata.csv', sep = ',', stringsAsFactors=FALSE)
data <- data[complete.cases(data),]
##################################################################################
#Regression Analysis
setwd(loc_results_output)
results are only for the latest year (2012)
reg_data <- filter(data, agency == "Average")
##Correlation Plot - Overall
abbreviateSTR <- function(value, prefix){  # format string more concisely
lst = c()
for (item in value) {
if (is.nan(item) || is.na(item)) { # if item is NaN return empty string
lst <- c(lst, '')
next
}
item <- round(item, 2) # round to two digits
if (item == 0) { # if rounding results in 0 clarify
item = '<.01'
}
item <- as.character(item)
item <- sub("(^[0])+", "", item)    # remove leading 0: 0.05 -> .05
item <- sub("(^-[0])+", "-", item)  # remove leading -0: -0.05 -> -.05
lst <- c(lst, paste(prefix, item, sep = ""))
}
return(lst)
}
d <- select(reg_data, -iso2c, -country, -agency, -year, -rating)
cormatrix = rcorr(as.matrix(d), type='pearson')
cordata = melt(cormatrix$r)
cordata$labelr = abbreviateSTR(melt(cormatrix$r)$value, 'r')
cordata$labelP = abbreviateSTR(melt(cormatrix$P)$value, 'P')
cordata$label = paste(cordata$labelr, "\n",
cordata$labelP, sep = "")
cordata$strike = ""
cordata$strike[cormatrix$P > 0.05] = "X"
txtsize <- par('din')[2] / 2
ggplot(cordata, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +
theme(axis.text.x = element_text(angle=90, hjust=TRUE)) +
xlab("") + ylab("") +
geom_text(label=cordata$label, size=txtsize) +
geom_text(label=cordata$strike, size=txtsize * 4, color="red", alpha=0.4)
cormatrix = rcorr(as.matrix(d), type='pearson')
cormatrix
stargazer(cormatrix)
stargazer(cormatrix[[2]], type = 'text')
stargazer(cormatrix[[1]], type = 'text')
stargazer(cormatrix[[1]], type = 'text', summary = FALSE)
stargazer(cormatrix[[2]], type = 'text', summary = FALSE)
stargazer(cormatrix[[3]], type = 'text', summary = FALSE)
stargazer(cormatrix, type = 'text', summary = FALSE)
correl_data <- group_by(reg_data, year) %>% select(-iso2c, -country, -agency, -year, -rating) %>%
do(correl = cor(.))
correl_data <- group_by(reg_data, year) %>% select(-iso2c, -country, -agency, -year, -rating) %>%
do(correl = rcorr(as.matrix(.), type='pearson')
)
correl_data
correl_data[[2]]
stargazer(correl_data[[2]], type = 'text', title = "Correlation (2007-2012)")
str(correl_data)
correl_data[[3]]
correl_data[[2,1]]
correl_data[[2,2]]
stargazer(test, type = 'text', title = "Correlation (2007-2012)")
test <- correl_data[[2,2]]
stargazer(test, type = 'text', title = "Correlation (2007-2012)")
test <- correl_data[[2,2,1]]
test <- correl_data[[2,2],1]
test <- correl_data[[2,2]]
test
test <- correl_data[[1,2]]
test
test <- correl_data[[1,2]]
test
test <- correl_data[[0,2]]
test <- correl_data[[1,1]]
test
test <- correl_data[[2,1]]
test
test
test <- correl_data[[3,1]]
test
test <- correl_data[[1,2]]
test
test <- correl_data[[1,2]]$p
test
test <- correl_data[[1,2]]$P
test
test <- correl_data
write.csv(test, "correl_data.csv")
correl_data
test <- correl_data[[2]]
test
write.csv(test, "correl_data.csv")
test <- correl_data[[2]]
write.csv(test, "correl_data.csv")
View(correl_data)
library(plyr)
test <- correl_data
test2 = ldply(test, function(t) t$toDataFrame())
write.csv(test2, "correl_data.csv")
test <- correl_data
library(plyr)
test <- correl_data
test2 = ldply(test, function(t) t$toDataFrame())
test <- correl_data[[2]]
test <- correl_data[[2]]
test2 = ldply(test, function(t) t$toDataFrame())
str(correl_data)
is.list(correl_data)
dput(correl_data)
?sink
sink("correl_data.csv")
correl_data
sink()
sink("correl_data.csv")
correl_data[[2]]
sink()
library(plyr)
test <- correl_data[[2]]
names(test) <- c('2007', '2008', '2009', '2010', '2011', '2012')
sink("correl_data.csv")
test
sink()
test <- correl_data[[2]]
names(test) <- c('2007', '2008', '2009', '2010', '2011', '2012')
sink("correl_data.txt")
test
sink()
#Correlations yearly
correl_year <- group_by(reg_data, year) %>% select(-iso2c, -country, -agency, -year, -rating) %>%
do(correl = rcorr(as.matrix(.), type='pearson')
##export yearly correlations
test <- correl_year[[2]]
names(test) <- c('2007', '2008', '2009', '2010', '2011', '2012')
sink("correl_year.txt")
test
sink()
#Correlations yearly
correl_year <- group_by(reg_data, year) %>% select(-iso2c, -country, -agency, -year, -rating) %>%
do(correl = rcorr(as.matrix(.), type='pearson'))
##export yearly correlations
test <- correl_year[[2]]
names(test) <- c('2007', '2008', '2009', '2010', '2011', '2012')
sink("correl_year.txt")
test
sink()
d <- select(reg_data, -iso2c, -country, -agency, -year, -rating)
correl <- rcorr(as.matrix(d), type='pearson')
correl[[2]] <- rcorr(as.matrix(d), type='pearson')
correl <- rcorr(as.matrix(d), type='pearson')
correl[2]
correl[[2]]
correl
##export overall correlations
sink("correl.txt")
correl
sink()
##export overall correlations
sink("correl_overall.txt")
correl
sink()
