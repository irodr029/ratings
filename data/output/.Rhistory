x_1 <- phi*x_0 + rnorm(1,0,1)
x_0 <- x_1
vec[i] <- x_1
}
return(vec)
}
phis <- seq(from = 0, to = 1, by = 0.25)
autoregs <- sapply(phis, autoreg)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = Var2)) + geom_line()
ggplot(data, aes(x = Var1, y = value, alpha = Var2)) + geom_line()
ggplot(data, aes(x = Var1, y = value, alpha = Var2)) + geom_line() + theme_bw()
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
phis <- seq(from = 0, to = 1, by = 0.3)
autoregs <- sapply(phis, autoreg)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
phis <- seq(from = 0, to = 1, by = 0.4)
phis <- seq(from = 0, to = 1, by = 0.2)
phis <- seq(from = 0, to = 1, by = 0.3)
phis <- seq(from = 0, to = 1, by = 0.5)
autoregs <- sapply(phis, autoreg)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg(,50))
autoregs <- sapply(phis, autoreg, time = 100)
autoregs <- sapply(phis, autoreg, time = 20)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
phis <- seq(from = 0, to = 1, by = 0.25)
phis <- seq(from = 0, to = 1, by = 0.25)
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
colnames(autoregs) <- phis
data <- melt(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_line() + theme_bw()
as.data.frame(log(autoregs))
as.data.frame(log(autoregs+1))
as.data.frame(log(autoregs+1))
colnames(autoregs) <- phis
as.data.frame(autoregs)
autoreg <- function(phi, time=100){
vec <- numeric(time)
for (i in 1:time){
x_0 <- 0
x_1 <- phi*x_0 + rnorm(1,0,1)
x_0 <- x_1
vec[i] <- x_1
}
return(vec)
}
phis <- seq(from = 0, to = 1, by = 0.25)
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(autoregs)
as.data.frame(1+autoregs)
as.data.frame(log(1+autoregs))
colnames(autoregs) <- phis
autoregs <- sapply(phis, autoreg, time = 10)
as.data.frame(log(1+autoregs))
as.data.frame(log(autoregs))
as.data.frame(autoregs)
colnames(autoregs) <- phis
as.data.frame(autoregs)
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_point() + theme_bw()
ggplot(data, aes(x = Var1, y = value, colour = factor(Var2))) + geom_smooth() + theme_bw()
ggplot(data, aes(x = Var1, y = value, alpha = factor(Var2))) + geom_smooth() + theme_bw()
library("WDI") #download world bank package
library("plyr")
library("dplyr") #download dplyr package to ease data merging and handling
library("reshape2") #download reshape2 package to ease data merging and handling
QR <- rnorm(120, mean = 0.08, 0.20)
QR
periods <- length(QR)
periods
periods <- length(QR)
AR <- numeric(periods)
for (period in periods){
AR[period] <- prod(1+QR[period-4:period])^(1/4) - 1
}
AR
for (period in 1:periods){
AR[period] <- prod(1+QR[period-4:period])^(1/4) - 1
}
AR
for (period in 1:1){
AR[period] <- 1+QR[period-4:period]
}
AR
AR <- numeric(4)
for (period in 1:1){
AR[period] <- 1+QR[period-4:period]
}
AR
1+QR[1-3:period]
1+QR[4-3:4]
QR[4-3:4]
1+QR[4-3:4,]
QR[1:4]
QR[(3-1):4]
QR[(4-1):4]
QR[(4-1):4]
QR[(5-1):4]
QR[(5-1):5]
prod(1+QR)^(1/4)-1
1+QR
prod(1+QR)
QR[4-3:-4]
QR <- rnorm(120, mean = 0.08, 0.20)
QR[4-3:-4]
QR
QR[4-3:-4]
QR[1-3:-4]
QR[2-3:-4]
QR[3-3:-4]
QR[4-3:-4]
QR[4-4:-1]
QR[5-4:-1]
QR[5-4:-2]
QR[6-4:-2]
QR
QR[4-4:-1]
QR[4-4:-2]
QR[5-4:-1]
QR[3-4:-1]
QR[4-4:-1]
QR[4-4:0]
QR[5-4:1]
QR[6-4:2]
QR[6-4:3]
QR[6-4:-1]
QR[6-4:0]
QR[6-4:-1]
QR[6-4:1]
QR[7-4:1]
QR[4-4:1]
QR[4-4:2]
QR[4-4:-1]
QR[4-4:0]
QR[5-4:1]
QR[5-4:0]
QR[5-4:-1]
QR[5-4:2]
QR[5-4:1]
QR[4-4:1]
QR[4-4:2]
QR[4-4:0]
QR[5-4:1]
QR[6-4:1]
QR[7-4:1]
QR[8-4:1]
QR[1-5:1]
QR[1-5:1]
QR[1-5:1]
QR[5-4:1]
QR[6-4:1]
periods <- seq(length(QR))
QR[1:1]
QR[5-4:1]
AR <- numeric(periods)
AR <- numeric(length(periods))
for (period in periods){
AR[period] <- prod(1+QR[(4+period)-4:1])^(1/4)-1
}
AR
for (period in periods){
AR[period+3] <- prod(1+QR[(4+period)-4:1])^(1/4)-1
}
AR
for (period in periods){
AR[(period+3)] <- prod(1+QR[(4+period)-4:1])^(1/4)-1
}
AR
for (period in periods){
AR[period] <- prod(1+QR[(3+period)-4:1])^(1/4)-1
}
AR
for (period in periods){
AR[period] <- prod(1+QR[(6+period)-4:1])^(1/4)-1
}
AR
for (period in periods){
AR[period] <- prod(1+QR[(2+period)-4:1])^(1/4)-1
}
AR
for (period in periods){
AR[period] <- prod(1+QR[(4+period)-4:1])^(1/4)-1
}
AR
cbind(QR,AR)
QR <- rnorm(120, mean = 0.08, 0.20)
periods <- seq(length(QR))
AR <- numeric(length(periods))
for (period in periods){
AR[period] <- prod(1+QR[(4+period)-4:1])^(1/4)-1
}
length(AR)
length(QR)
AR
for (period in periods){
AR[period] <- prod(1+QR[(4+period)-4:1])^(1/4)-1
}
for (period in periods){
AR[period] <- prod(1+QR[(5+period)-4:1])^(1/4)-1
}
AR[period] <- prod(1+QR[(6+period)-4:1])^(1/4)-1
for (period in periods){
AR[period] <- prod(1+QR[(6+period)-4:1])^(1/4)-1
}
for (period in periods){
AR[period] <- prod(1+QR[(6+period)-4:1])^(1/4)-1
}
for (period in periods){
AR[period] <- prod(1+QR[(3+period)-4:1])^(1/4)-1
}
QR <- rnorm(120, mean = 0.08, 0.20)
periods <- seq(length(QR))
AR <- numeric(length(periods))
for (period in periods){
AR[period] <- prod(1+QR[(4+period)-4:1])^(1/4)-1
}
#####Merge data
#This script merges together the files from
#the input folder
#Packages for data cleaning
library('reshape2')
library('dplyr')
library('lubridate')
library('data.table')
library('zoo')
library('ggplot2')
#Define input and output locations
loc_data_input <- "~/Desktop/Ratings/data/input"
loc_data_output <- "~/Desktop/Ratings/data/output"
#Read in all the input data files in working directory as data frames----
files <- dir(loc_data_input)
for (file in files){
perpos <- which(strsplit(file, "")[[1]]==".")
assign(
gsub(" ","",substr(file, 1, perpos-1)),
read.csv(paste(file,sep=""), stringsAsFactors=FALSE))
}
#Read in all the output data files in working directory as data frames----
files <- dir(loc_data_output)
for (file in files){
perpos <- which(strsplit(file, "")[[1]]==".")
assign(
gsub(" ","",substr(file, 1, perpos-1)),
read.csv(paste(file,sep=""), stringsAsFactors=FALSE))
}
#####MERGE DEFAULT HISTORY W/ WB
defaulthistory <- select(defaulthistory, iso2c, year, default_date = date)
data <- left_join(01_WB, defaulthistory, by = c("iso2c","year"))
install.packages("knitr")
#Packages for data cleaning
library('reshape2')
library('dplyr')
library('lubridate')
library('data.table')
library('zoo')
library('ggplot2')
loc_data_input <- "~/Desktop/Lawrence Data"
portfolio <- read.csv("25ff.csv", sep = ",")
portfolio$date <- mdy(portfolio$date)
return_t <- select(portfolio, -date, -mktrf, -smb, -hml, -rf, -umd)
omega <- cov(return_t)
Er_t <- colMeans(return_t)
unity <- rep(1,25)
M_bar <- seq(0.80, 1.20, 0.01)
beta_M <- NULL
for (i in M_bar ) {
beta_M[i] = omega^{-1}%*%(unity - M_bar[i]*(unity + Er_t))
}
loc_data_input <- "~/Desktop/Lawrence Data"
portfolio <- read.csv("25ff.csv", sep = ",")
loc_data_input <- "~/Desktop/Lawrence Data"
portfolio <- read.csv("25ff.csv", sep = ",")
library("pander", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
#####Clean data
#This script cleans up the final merged
#data file
#Packages for data cleaning
library('WDI')
library('reshape2')
library('dplyr')
library('lubridate')
library('data.table')
library('zoo')
library('ggplot2')
#Define input and output locations
loc_data_input <- "~/Desktop/Ratings/data/input"
loc_data_output <- "~/Desktop/Ratings/data/output"
#Read in all the input data files in working directory as data frames----
setwd(loc_data_input)
files <- dir(loc_data_input)
for (file in files){
perpos <- which(strsplit(file, "")[[1]]==".")
assign(
gsub(" ","",substr(file, 1, perpos-1)),
read.csv(paste(file,sep=""), stringsAsFactors=FALSE))
}
#Read in all the output data files in working directory as data frames----
setwd(loc_data_output)
files <- dir(loc_data_output)
for (file in files){
perpos <- which(strsplit(file, "")[[1]]==".")
assign(
gsub(" ","",substr(file, 1, perpos-1)),
read.csv(paste(file,sep=""), stringsAsFactors=FALSE))
}
dat <- arrange(`05_merge_cds`, agency, country, desc(year))
#####Argentina had no GNI, using the UN database
iso2c <- 'AR'
year <- c(2006, 2007, 2008, 2009, 2010, 2011, 2012)
GNIpercap <- c(5579, 6632, 8287, 10101, 9282, 11227, 13453)
argGNI <- cbind.data.frame(iso2c, year, GNIpercap)
dat <- merge(dat, argGNI, by=c('year', 'iso2c'), all = TRUE)
dat <- mutate(dat, GNIpercap = ifelse(iso2c == "AR", GNIpercap.y, GNIpercap.x))
dat <- select(dat, -GNIpercap.x, -GNIpercap.y)
####Convert these to numeric for next step
dat$current_account_WEO <- as.numeric(dat$current_account_WEO)
dat$fiscal_balance_WEO <- as.numeric(dat$fiscal_balance_WEO)
####Outputs data file before lagging and averaging. This will be the data for SAS.
setwd(loc_data_output)
write.csv(dat, file="05_clean.csv", row.names=FALSE)
####Create lag of all necessary variables
dat <- dat %>%
group_by(agency, iso2c) %>%
arrange(agency, year) %>%
mutate(
lag_GNIpercap = lag(GNIpercap,1),
lag_export = lag(export,1),
lag_currentaccount = lag(currentaccount,1),
lag_ext_debt = lag(ext_debt,1),
lag_currency_debt = lag(currency_debt,1),
lag_current_account_WEO = lag(current_account_WEO,1)
)
dat <- dat %>%
group_by(agency, iso2c) %>%
arrange(agency, year) %>%
mutate(
ma_GDPgrowth = lag(rollmean(x = GDPgrowth, 4, align = "right", fill = NA),1),
ma_fiscal_balance_WEO = lag(rollapply(fiscal_balance_WEO, 3, mean, align = "right", fill = NA),1),
ma_budget = lag(rollapply(budget, 3, mean, align = "right", fill = NA),1),
ma_inflation_cpi = lag(rollapply(inflation_cpi, 3, mean, align = "right", fill = NA),1),
ma_inflation_def = lag(rollapply(inflation_def, 3, mean, align = "right", fill = NA),1),
lag_cds = lag(rollapply(spreadCDS, 3, mean, align = "right", fill = NA),1)
)
####Only countries and years available from cds file
dat <- filter(dat, !is.na(spreadCDS))
####Create development indicator (using port_develop) and external debt
dat <- dat %>%
mutate(development_indicator_port = ifelse(development < 3.6 | is.na(development),0,1),
external_debt = lag_ext_debt/lag_export * 100)
####Create development indicator using WB guidlines
dat <- merge(dat,dev_min, by = 'year')
dat <- mutate(dat, development_indicator_wb = ifelse(dev_min < GNIpercap,1,0))
#Output merged file
setwd(loc_data_output)
write.csv(dat, file="06_cleanLags.csv", row.names=FALSE)
#####Finalize data
#This script cleans up the final cleaned data
#data file for checking
#Packages for data cleaning
library('WDI')
library('reshape2')
library('dplyr')
library('lubridate')
library('data.table')
library('zoo')
library('ggplot2')
#Define input and output locations
loc_data_input <- "~/Desktop/Ratings/data/input"
loc_data_output <- "~/Desktop/Ratings/data/output"
#Read in all the input data files in working directory as data frames----
setwd(loc_data_output)
data <- read.csv('06_cleanLags.csv', sep = ',', stringsAsFactors=FALSE)
ratings <- read.csv('ratings_corrected.csv', sep = ',', stringsAsFactors=FALSE)
data <- data %>%
group_by(agency, iso2c, year) %>%
select(agency, country, iso2c, year, ratings, ratings_prior, lag_cds,
lag_GNIpercap, ma_GDPgrowth, ma_inflation_cpi, ma_inflation_def, lag_currentaccount, lag_current_account_WEO,
ma_budget, ma_fiscal_balance_WEO, external_debt, ext_debt_2 = lag_currency_debt, lag_export, dflt = def_indicator, port = development,
dvlp_port = development_indicator_port, dvlp_wb = development_indicator_wb) %>%
arrange(agency, iso2c, year)
data <- left_join(data, ratings, by = c('agency', 'iso2c', 'year', 'country'))
data <- mutate(data, ratings = ratings.y)
#Output merged file
setwd(loc_data_output)
write.csv(data, file="07_final.csv", row.names=FALSE)
