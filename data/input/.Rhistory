View(dat)
#####Clean data
#This script cleans up the final merged
#data file
#Packages for data cleaning
library('WDI')
library('reshape2')
library('dplyr')
library('lubridate')
library('data.table')
library('zoo')
library('ggplot2')
#Define input and output locations
loc_data_input <- "~/Desktop/Ratings/data/input"
loc_data_output <- "~/Desktop/Ratings/data/output"
#Read in all the input data files in working directory as data frames----
setwd(loc_data_input)
files <- dir(loc_data_input)
for (file in files){
perpos <- which(strsplit(file, "")[[1]]==".")
assign(
gsub(" ","",substr(file, 1, perpos-1)),
read.csv(paste(file,sep=""), stringsAsFactors=FALSE))
}
#Read in all the output data files in working directory as data frames----
setwd(loc_data_output)
files <- dir(loc_data_output)
for (file in files){
perpos <- which(strsplit(file, "")[[1]]==".")
assign(
gsub(" ","",substr(file, 1, perpos-1)),
read.csv(paste(file,sep=""), stringsAsFactors=FALSE))
}
dat <- arrange(`05_merge_cds`, agency, country, desc(year))
#####Argentina had no GNI, using the UN database
iso2c <- 'AR'
year <- c(2006, 2007, 2008, 2009, 2010, 2011, 2012)
GNIpercap <- c(5579, 6632, 8287, 10101, 9282, 11227, 13453)
argGNI <- cbind.data.frame(iso2c, year, GNIpercap)
dat <- merge(dat, argGNI, by=c('year', 'iso2c'), all = TRUE)
dat <- mutate(dat, GNIpercap = ifelse(iso2c == "AR", GNIpercap.y, GNIpercap.x))
dat <- select(dat, -GNIpercap.x, -GNIpercap.y)
####Convert these to numeric for next step
dat$current_account_WEO <- as.numeric(dat$current_account_WEO)
dat$fiscal_balance_WEO <- as.numeric(dat$fiscal_balance_WEO)
####Create lag of all necessary variables
dat <- dat %>%
group_by(agency, iso2c) %>%
arrange(agency, year) %>%
mutate(
lag_GNIpercap = lag(GNIpercap,1),
lag_export = lag(export,1),
lag_currentaccount = lag(currentaccount,1),
lag_ext_debt = lag(ext_debt,1),
lag_currency_debt = lag(currency_debt,1),
lag_current_account_WEO = lag(current_account_WEO,1)
)
dat <- dat %>%
group_by(agency, iso2c) %>%
arrange(agency, year) %>%
mutate(
ma_GDPgrowth = rollmean(x = GDPgrowth, 4, align = "right", fill = NA),
ma_fiscal_balance_WEO = rollapply(fiscal_balance_WEO, 3, mean, align = "right", fill = NA),
ma_budget = rollapply(budget, 3, mean, align = "right", fill = NA),
ma_inflation_cpi = rollapply(inflation_cpi, 3, mean, align = "right", fill = NA),
ma_inflation_def = rollapply(inflation_def, 3, mean, align = "right", fill = NA),
lag_cds = rollapply(spreadCDS, 3, mean, align = "left", fill = NA)
)
####Only countries and years available from cds file
dat <- filter(dat, !is.na(spreadCDS))
####Create development indicator (using port_develop) and external debt
dat <- dat %>%
mutate(development_indicator_port = ifelse(development < 3.6 | is.na(development),0,1),
external_debt = lag_ext_debt/lag_export * 100)
####Create development indicator using WB guidlines
dat <- merge(dat,dev_min, by = 'year')
dat <- mutate(dat, development_indicator_wb = ifelse(dev_min < GNIpercap,1,0))
View(dat)
#####Clean data
#This script cleans up the final merged
#data file
#Packages for data cleaning
library('WDI')
library('reshape2')
library('dplyr')
library('lubridate')
library('data.table')
library('zoo')
library('ggplot2')
#Define input and output locations
loc_data_input <- "~/Desktop/Ratings/data/input"
loc_data_output <- "~/Desktop/Ratings/data/output"
#Read in all the input data files in working directory as data frames----
setwd(loc_data_input)
files <- dir(loc_data_input)
for (file in files){
perpos <- which(strsplit(file, "")[[1]]==".")
assign(
gsub(" ","",substr(file, 1, perpos-1)),
read.csv(paste(file,sep=""), stringsAsFactors=FALSE))
}
#Read in all the output data files in working directory as data frames----
setwd(loc_data_output)
files <- dir(loc_data_output)
for (file in files){
perpos <- which(strsplit(file, "")[[1]]==".")
assign(
gsub(" ","",substr(file, 1, perpos-1)),
read.csv(paste(file,sep=""), stringsAsFactors=FALSE))
}
dat <- arrange(`05_merge_cds`, agency, country, desc(year))
#####Argentina had no GNI, using the UN database
iso2c <- 'AR'
year <- c(2006, 2007, 2008, 2009, 2010, 2011, 2012)
GNIpercap <- c(5579, 6632, 8287, 10101, 9282, 11227, 13453)
argGNI <- cbind.data.frame(iso2c, year, GNIpercap)
dat <- merge(dat, argGNI, by=c('year', 'iso2c'), all = TRUE)
dat <- mutate(dat, GNIpercap = ifelse(iso2c == "AR", GNIpercap.y, GNIpercap.x))
dat <- select(dat, -GNIpercap.x, -GNIpercap.y)
####Convert these to numeric for next step
dat$current_account_WEO <- as.numeric(dat$current_account_WEO)
dat$fiscal_balance_WEO <- as.numeric(dat$fiscal_balance_WEO)
####Create lag of all necessary variables
dat <- dat %>%
group_by(agency, iso2c) %>%
arrange(agency, year) %>%
mutate(
lag_GNIpercap = lag(GNIpercap,1),
lag_export = lag(export,1),
lag_currentaccount = lag(currentaccount,1),
lag_ext_debt = lag(ext_debt,1),
lag_currency_debt = lag(currency_debt,1),
lag_current_account_WEO = lag(current_account_WEO,1)
)
dat <- dat %>%
group_by(agency, iso2c) %>%
arrange(agency, year) %>%
mutate(
ma_GDPgrowth = rollmean(x = GDPgrowth, 4, align = "right", fill = NA),
ma_fiscal_balance_WEO = rollapply(fiscal_balance_WEO, 3, mean, align = "right", fill = NA),
ma_budget = rollapply(budget, 3, mean, align = "right", fill = NA),
ma_inflation_cpi = rollapply(inflation_cpi, 3, mean, align = "right", fill = NA),
ma_inflation_def = rollapply(inflation_def, 3, mean, align = "right", fill = NA),
lag_cds = rollapply(spreadCDS, 3, mean, align = "right", fill = NA)
)
####Only countries and years available from cds file
dat <- filter(dat, !is.na(spreadCDS))
####Create development indicator (using port_develop) and external debt
dat <- dat %>%
mutate(development_indicator_port = ifelse(development < 3.6 | is.na(development),0,1),
external_debt = lag_ext_debt/lag_export * 100)
####Create development indicator using WB guidlines
dat <- merge(dat,dev_min, by = 'year')
dat <- mutate(dat, development_indicator_wb = ifelse(dev_min < GNIpercap,1,0))
View(dat)
#Output merged file
setwd(loc_data_output)
write.csv(dat, file="06_clean.csv", row.names=FALSE)
#####Finalize data
#This script cleans up the final cleaned data
#data file for checking
#Packages for data cleaning
library('WDI')
library('reshape2')
library('dplyr')
library('lubridate')
library('data.table')
library('zoo')
library('ggplot2')
#Define input and output locations
loc_data_input <- "~/Desktop/Ratings/data/input"
loc_data_output <- "~/Desktop/Ratings/data/output"
#Read in all the input data files in working directory as data frames----
setwd(loc_data_output)
data <- read.csv('06_clean.csv', sep = ',', stringsAsFactors=FALSE)
ratings <- read.csv('ratings_corrected.csv', sep = ',', stringsAsFactors=FALSE)
data <- data %>%
group_by(agency, iso2c, year) %>%
select(agency, country, iso2c, year, ratings, ratings_prior, lag_cds,
lag_GNIpercap, ma_GDPgrowth, ma_inflation_cpi, ma_inflation_def, lag_currentaccount, lag_current_account_WEO,
ma_budget, ma_fiscal_balance_WEO, external_debt, ext_debt_2 = lag_currency_debt, lag_export, dflt = def_indicator, port = development,
dvlp_port = development_indicator_port, dvlp_wb = development_indicator_wb) %>%
arrange(agency, iso2c, year)
data <- left_join(data, ratings, by = c('agency', 'iso2c', 'year', 'country'))
data <- mutate(data, ratings = ratings.y)
#Output merged file
setwd(loc_data_output)
write.csv(data, file="07_final.csv", row.names=FALSE)
#####Regression Data
#This script creates data for regging
#Packages for data cleaning
library('WDI')
library('reshape2')
library('dplyr')
library('lubridate')
library('data.table')
library('zoo')
library('ggplot2')
library('stargazer')
#Define input and output locations
loc_data_input <- "~/Desktop/Ratings/data/input"
loc_data_output <- "~/Desktop/Ratings/data/output"
#Read in all the input data files in working directory as data frames----
setwd(loc_data_output)
data <- read.csv('07_final.csv', sep = ',', stringsAsFactors=FALSE)
setwd(loc_data_input)
rating_indicator <- read.csv('ratings_indicator.csv', sep = ',', stringsAsFactors=FALSE)
data <- left_join(data, rating_indicator, by = c('agency', 'ratings'))
#If NA use 2nd data sources
reg_data <- tbl_df(data) %>% transmute(
agency = agency,
country  = country,
iso2c = iso2c,
year = year,
rating = ratings_indicator,
CDS = lag_cds,
GNI_cap = lag_GNIpercap,
GDP_grw = ma_GDPgrowth,
inf = ifelse(is.na(ma_inflation_cpi), ma_inflation_def, ma_inflation_cpi),
ext_bal = ifelse(is.na(lag_currentaccount), lag_current_account_WEO, lag_currentaccount),
fsc_bal = ifelse(is.na(ma_budget), ma_fiscal_balance_WEO, ma_budget),
ext_dbt = ifelse(is.na(external_debt), ext_debt_2/lag_export, external_debt),
def = dflt,
dev = dvlp_wb
) %>%
filter(complete.cases(.))
#Summaries
results <- group_by(reg_data, agency, year) %>%
do(model = summary(lm(rating ~ log(GNI_cap) + GDP_grw + inf + ext_bal + fsc_bal + ext_dbt + def + dev, data = .)))
results[[3]]
View(reg_data)
#####Finalize data
#This script cleans up the final cleaned data
#data file for checking
#Packages for data cleaning
library('WDI')
library('reshape2')
library('dplyr')
library('lubridate')
library('data.table')
library('zoo')
library('ggplot2')
#Define input and output locations
loc_data_input <- "~/Desktop/Ratings/data/input"
loc_data_output <- "~/Desktop/Ratings/data/output"
#Read in all the input data files in working directory as data frames----
setwd(loc_data_output)
data <- read.csv('06_clean.csv', sep = ',', stringsAsFactors=FALSE)
ratings <- read.csv('ratings_corrected.csv', sep = ',', stringsAsFactors=FALSE)
data <- data %>%
group_by(agency, iso2c, year) %>%
select(agency, country, iso2c, year, ratings, ratings_prior, lag_cds,
lag_GNIpercap, ma_GDPgrowth, ma_inflation_cpi, ma_inflation_def, lag_currentaccount, lag_current_account_WEO,
ma_budget, ma_fiscal_balance_WEO, external_debt, ext_debt_2 = lag_currency_debt, lag_export, dflt = def_indicator, port = development,
dvlp_port = development_indicator_port, dvlp_wb = development_indicator_wb) %>%
arrange(agency, iso2c, year)
data <- left_join(data, ratings, by = c('agency', 'iso2c', 'year', 'country'))
data <- mutate(data, ratings = ratings.y)
View(data)
#####Regression Data
#This script creates data for regging
#Packages for data cleaning
library('WDI')
library('reshape2')
library('dplyr')
library('lubridate')
library('data.table')
library('zoo')
library('ggplot2')
library('stargazer')
#Define input and output locations
loc_data_input <- "~/Desktop/Ratings/data/input"
loc_data_output <- "~/Desktop/Ratings/data/output"
#Read in all the input data files in working directory as data frames----
setwd(loc_data_output)
data <- read.csv('07_final.csv', sep = ',', stringsAsFactors=FALSE)
setwd(loc_data_input)
rating_indicator <- read.csv('ratings_indicator.csv', sep = ',', stringsAsFactors=FALSE)
data <- left_join(data, rating_indicator, by = c('agency', 'ratings'))
View(rating_indicator)
#####Regression Data
#This script creates data for regging
#Packages for data cleaning
library('WDI')
library('reshape2')
library('dplyr')
library('lubridate')
library('data.table')
library('zoo')
library('ggplot2')
library('stargazer')
#Define input and output locations
loc_data_input <- "~/Desktop/Ratings/data/input"
loc_data_output <- "~/Desktop/Ratings/data/output"
#Read in all the input data files in working directory as data frames----
setwd(loc_data_output)
data <- read.csv('07_final.csv', sep = ',', stringsAsFactors=FALSE)
setwd(loc_data_input)
rating_indicator <- read.csv('ratings_indicator.csv', sep = ',', stringsAsFactors=FALSE)
data <- left_join(data, rating_indicator, by = c('agency', 'ratings'))
#If NA use 2nd data sources
reg_data <- tbl_df(data) %>% transmute(
agency = agency,
country  = country,
iso2c = iso2c,
year = year,
rating = ratings_indicator,
CDS = lag_cds,
GNI_cap = lag_GNIpercap,
GDP_grw = ma_GDPgrowth,
inf = ifelse(is.na(ma_inflation_cpi), ma_inflation_def, ma_inflation_cpi),
ext_bal = ifelse(is.na(lag_currentaccount), lag_current_account_WEO, lag_currentaccount),
fsc_bal = ifelse(is.na(ma_budget), ma_fiscal_balance_WEO, ma_budget),
ext_dbt = ifelse(is.na(external_debt), ext_debt_2/lag_export, external_debt),
def = dflt,
dev = dvlp_wb
) %>%
filter(complete.cases(.))
#Summaries
results <- group_by(reg_data, agency, year) %>%
do(model = summary(lm(rating ~ log(GNI_cap) + GDP_grw + inf + ext_bal + fsc_bal + ext_dbt + def + dev, data = .)))
results[[3]]
do(model = summary(lm(rating ~ log(GNI_cap) + GDP_grw + inf + ext_bal + fsc_bal + ext_dbt + def + dev + log(cds), data = .)))
#Summaries
results <- group_by(reg_data, agency, year) %>%
do(model = summary(lm(rating ~ log(GNI_cap) + GDP_grw + inf + ext_bal + fsc_bal + ext_dbt + def + dev + log(cds), data = .)))
#Summaries
results <- group_by(reg_data, agency, year) %>%
do(model = summary(lm(rating ~ log(GNI_cap) + GDP_grw + inf + ext_bal + fsc_bal + ext_dbt + def + dev + log(CDS), data = .)))
results[[3]]
#Summaries
results <- group_by(reg_data, agency, year) %>%
do(model = summary(lm(rating ~ log(GNI_cap) + GDP_grw + log(inf) + ext_bal + fsc_bal + ext_dbt + def + dev + log(CDS), data = .)))
results[[3]]
install.packages("png")
View(reg_data)
repl_SP <- filter(reg_data, year == "2012", agency == "S&P")
repl_MD <- filter(reg_data, year == "2012", agency == "Moody's")
summary(lm(data = repl_SP,
rating ~ log(GNI_cap) + GDP_grw + log(inf) + ext_bal + fsc_bal + ext_dbt + def + dev + log(CDS)))
summary(lm(data = repl_SP,
rating ~ log(GNI_cap) + GDP_grw + log(inf) + ext_bal + fsc_bal + ext_dbt + def + dev)
summary(lm(data = repl_SP,
rating ~ log(GNI_cap) + GDP_grw + log(inf) + ext_bal + fsc_bal + ext_dbt + def + dev))
summary(lm(data = repl_SP, rating ~ log(GNI_cap) + GDP_grw + log(inf) + ext_bal + fsc_bal + ext_dbt + def + dev))
summary(lm(data = repl_SP, rating ~ log(GNI_cap) + GDP_grw + log(100+inf) + ext_bal + fsc_bal + ext_dbt + def + dev))
summary(lm(data = repl_SP, rating ~ log(GNI_cap) + GDP_grw + log(inf) + ext_bal + fsc_bal + ext_dbt + def + dev))
+
summary(lm(data = repl_SP, rating ~ log(GNI_cap) + GDP_grw + log(100+inf) + ext_bal + fsc_bal + ext_dbt + def + dev))
summary(lm(data = repl_SP, rating ~ log(GNI_cap) + GDP_grw + log(100+inf) + ext_bal + fsc_bal + ext_dbt + def + dev))
summary(lm(data = repl_MD, rating ~ log(GNI_cap) + GDP_grw + log(100+inf) + ext_bal + fsc_bal + ext_dbt + def + dev))
dcast(reg_data, agency + iso2c + country ~ variable)
dcast(reg_data, agency + iso2c + country ~ rating)
dcast(reg_data, iso2c + country + year ~ agency)
dcast(reg_data, iso2c + country + year ~ rating)
dcast(reg_data, iso2c + country + year ~ agency)
reg_data
dat <- select(reg_data, agency, country, iso2c, year, rating)
dcast(dat, iso2c + country + year ~ agency)
#Create average data
reg_other <- select(reg_data, agency, country, iso2c, year, rating)
reg_other <- dcast(dat, iso2c + country + year ~ agency)
reg_other
dat <- mutate(dat, Difference = `Moody's` - `S&P`,
Average = (`Moody's` + `S&P`))
dat <- mutate(dat, Difference = Moody's - S&P,
Average = (Moody's + S&P))
colnames(dat)[,4] <- 'Moodys'
colnames(dat)[,5] <- 'SP'
dat
dat <- select(reg_data, agency, country, iso2c, year, rating)
dat <- dcast(dat, iso2c + country + year ~ agency)
dat
colnames(dat)[,4] <- 'Moodys'
colnames(dat)[,5] <- 'SP'
dat
colnames(dat)[4] <- 'Moodys'
colnames(dat)[5] <- 'SP'
dat
dat <- mutate(dat, Difference = Moodys - SP,
Average = (Moodys + SP)/2)
dat
dat <- melt(dat)
dat
dat <- melt(dat, id=c("iso2c","country", "year"))
#Create average data
dat <- select(reg_data, agency, country, iso2c, year, rating)
dat <- dcast(dat, iso2c + country + year ~ agency)
colnames(dat)[4] <- 'Moodys'
colnames(dat)[5] <- 'SP'
dat <- mutate(dat, Difference = Moodys - SP,
Average = (Moodys + SP)/2)
dat <- melt(dat, id=c("iso2c","country", "year"))
dat
colnames(dat)[4] <- 'agency'
colnames(dat)[5] <- 'rating'
dat
dat1 <- left_join(dat, reg_data, by=c('iso2c', 'country', 'year', 'agency'))
View(dat1)
dat1 <- left_join(dat, reg_data, by=c('iso2c', 'country', 'year'))
View(dat1)
dat1 <- left_join(dat, reg_data, by=c('iso2c', 'country', 'year', 'agency', 'rating'))
View(dat1)
dat1 <- left_join(dat1, reg_data$CDS, by=c('iso2c', 'country', 'year'))
View(dat1)
dat1 <- left_join(dat, reg_data, by=c('iso2c', 'country', 'year', 'agency', 'rating'), copy = TRUE)
View(dat1)
dat1 <- left_join(dat, reg_data, by=c('iso2c', 'country', 'year', 'agency'), copy=TRUE)
View(dat1)
dat1 <- left_join(dat, reg_data, by=c('iso2c', 'country', 'year', 'agency', 'rating'))
View(dat1)
dat1 <- left_join(dat1, reg_data$CDS, by=c('iso2c', 'country', 'year'), copy=TRUE)
dat1 <- left_join(dat1, subset(reg_data, iso2c, country, year, CDS), by=c('iso2c', 'country', 'year'), copy=TRUE)
dat1 <- left_join(dat1, select(reg_data, iso2c, country, year, CDS), by=c('iso2c', 'country', 'year'), copy=TRUE)
View(dat1)
dat2 <- regdata %>%
filter(agency = "S&P") %>%
select(-agency, -rating)
dat2 <- reg_data %>%
filter(agency = "S&P") %>%
select(-agency, -rating)
dat2 <- reg_data %>%
filter(agency == "S&P") %>%
select(-agency, -rating)
View(dat2)
View(dat)
dat1 <- reg_data %>%
filter(agency == "S&P") %>%
select(-agency, -rating)
dat2 <- left_join(dat, data1, by=c('iso2c', 'country', 'year'))
dat2 <- left_join(dat, dat1, by=c('iso2c', 'country', 'year'))
View(dat2)
rep_data <- filter(dat2, year == 2012)
rep_results <- group_by(rep_data, agency) %>%
do(model = summary(lm(rating ~ log(GNI_cap) + GDP_grw + log(inf) + ext_bal + fsc_bal + ext_dbt + def + dev, data = .)))
rep_results[[3]]
View(rep_results)
rep_results[[2]]
rep_results
rep_results[[2]]
stargazer([[2]])
stargazer(rep_results[[2]])
l_ply(rep_results, summary, .print = TRUE)
library('plyr')
l_ply(rep_results, summary, .print = TRUE)
l_ply(rep_results[[2]], summary, .print = TRUE)
summary(rep_results[[2]])
summary(rep_results)
rep_results[[2]]
tidy?
?tidy
??tidy
install.packages("broom")
library('broom')
table <- rep_results %>%
tidy(model) %>%
filter(term == "indepVar")
tidy(rep_results, model)
table <- rep_results[[2]] %>%
tidy(model) %>%
filter(term == "indepVar")
rep_results[[2,1]]
rep_results[[2,2]]
rep_results[[2,3]]
rep_results[[2,4]]
rep_results[[2,2]]
rep_results[[2,1]]
rep_results[[3,2]]
rep_results[[2,2]]
stargazer(rep_results[[2,2]])
rep_results[1]
View(rep_results)
rep_results <- group_by(rep_data, agency) %>%
do(model = summary(stargazer(lm(rating ~ log(GNI_cap) + GDP_grw + log(inf) + ext_bal + fsc_bal + ext_dbt + def + dev, data = .))))
rep_results <- group_by(rep_data, agency) %>%
do(model = summary(stargazer(lm(rating ~ log(GNI_cap) + GDP_grw + log(inf) + ext_bal + fsc_bal + ext_dbt + def + dev, data = .), type='text')))
rep_data <- filter(dat2, year == 2012)
rep_results <- group_by(rep_data, agency) %>%
stargazer(do(model = lm(rating ~ log(GNI_cap) + GDP_grw + log(inf) + ext_bal + fsc_bal + ext_dbt + def + dev, data = .)), type='text')
rep_data <- filter(dat2, year == 2012)
rep_results <- group_by(rep_data, agency) %>%
do(model = lm(rating ~ log(GNI_cap) + GDP_grw + log(inf) + ext_bal + fsc_bal + ext_dbt + def + dev, data = .))
View(rep_results)
rep_results
rep_results[2]
rep_results[2,1]
rep_results[2,2]
stargazer(rep_results[2,2])
rep_results
rep_results[2,2]
rep_results[3,2]
rep_results[4,2]
rep_results[5,2]
rep_results[1,2]
rep_results[5,2]
stargazer(rep_results[1,2], rep_results[2,2], rep_results[3,2], rep_results[4,2], type = 'text')
type[1,[2]]
rep_results[1,[2]]
rep_results[[2]]
stargazer(ep_results[[2]])
stargazer(rep_results[[2]])
stargazer(rep_results[[1]], rep_results[[2]], rep_results[[3]], rep_results[[4]], type = 'text')
stargazer(rep_results[[1]], rep_results[[2]])
stargazer(rep_results[[1]], type = 'text')
stargazer(rep_results[[2]], type = 'text')
rep_results
rep_results[[2]]
```{r, echo=FALSE, warning=FALSE}
rep_results[[2]]
rep_results
?highlight
?highlight
